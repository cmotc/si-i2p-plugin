-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Destination-Isolating i2p HTTP Proxy(SAM Application)
=====================================================

*one eepSite, one tunnel.*

This is an i2p SAM application which presents an HTTP proxy(on port 4443 by
default) that acts as an intermediate between your browser and the i2p network.
Then it uses the SAM library to create a unique destination for each i2p site
that you visit. This way, your unique destination couldn't be used to track you
with a network of colluding sites. I doubt it's a substantial problem right now
but it might be someday. Facebook has an onion site, and i2p should have
destination isolation before there is a facebook.i2p.

Excitingly, after like a year of not being able to devote the time I should
have to this, I've finally made it work. I am successfully using this proxy to
browse eepSites pretty normally. There are still a few bugs to chase down, but
if somebody else wanted to try it out, I might not *totally* embarass myself.

What works so far:
- ------------------

### The http proxy

Again, *slightly less experimental*, but currently it is possible to set
your web browser's HTTP proxy to localhost:4443 and use it to browse eepSites.
I've mostly managed to stop all the bugs and hangs that would keep someone from
using it successfully and I'm even pretty sure it's mostly safe at this point.
It should at least fail early if something bad happens.

I am now fairly certain that it can't be forced to retrieve URL's outside the
i2p network under normal circumstances in properly configured browsers. Intrepid
observers may find it fun to start testing things now. Funnily enough, it would
have crashed under vanilla firefox last week because the captive portal shit.
Failed closed though, and now it's handled more gracefully.

I found a new way to crash it. Certain addresshelper URL's, when clicked, will
break the pipes. Adding addresshelper support will fix this. I'm not going to
do that until I get the existing code cleaned up.

#### Examples

##### curl

        curl -x 127.0.0.1:4443 http://i2p-projekt.i2p

##### surf

        export http_proxy="http://127.0.0.1:4443" surf http://i2p-projekt.i2p

#### Current Concerns:

If it wasn't super, super obvious to everyone, it's really, really easy to tell
the difference between this proxy and the default i2p/i2pd http proxies and I
don't think there's anything I can do about that.

It checks to see if it's getting an i2p url by splitting it at the first ".i2p"
which unfortunately means that I can't use it to visit trac.i2p2.i2p.

I am currently attacking this proxy while using various browsers. It seems more
complicated browsers are easier to attack. They might even do something
ridiculous, like presume you're using a captive portal and attempt to direct
you to a captive portal login assistance page. God captive portals are fucking
stupid. Who knew? Seriously, stay off my clearly labeled sites.

I am now fairly certain that it can't be forced to retrieve URL's outside the
i2p network in properly configured browsers under normal circumstances. Remember
to set [*] Use this proxy server for all protocols or other relevant browser
configurations. This appears to be the default behavior for surf and uzbl.

Before version 0.21, a framework for generating service tunnels ad-hoc will also
be in place. This will be used for fuzz-testing the http proxy and the pipe
proxy. Almost everything will be improved by the availability of this.

I haven't implemented addresshelpers/jump host interaction yet, but I have a
good idea how to now.

It would appear that, since it doesn't have to do lookups for sites that it has
already created a tunnel for, this proxy can sometimes be faster than the
standard http proxy. I'm not sure how to confirm this but will attempt to
correlate it with longitudinal testing.

### The pipes

Moved to [misc/docs/PIPES.md](https://github.com/eyedeekay/si-i2p-plugin/tree/master/misc/docs/PIPES.md)

What I'm doing right now:
- -------------------------

Implementing pipe-controlled service tunnels.

What the final version should do:
- ---------------------------------

The final version should use the parent pipe and the aggregating pipe to send
and recieve requests as an http proxy in the familiar way.

Version Roadmap:

  * ~~0.17 - Named Pipes work for top-level i2p domains and can retrieve~~
   ~~directories under a site~~
  * ~~0.18 - Named Pipes for i2p domains and can retrieve subdirectories,~~
   ~~which it caches in clearly-named folders as normal files(Containing HTML)~~
  * ~~0.19 - Expose an http proxy that hooks up to the existing infrastructure~~
   ~~for destination isolation~~
  * 0.20 - ~~Ready for more mainstream testing~~, ~~should successfully isolate~~
   ~~requests for resources embedded in the retrieved web pages~~ and should be
   able to generate services on the fly by talking to the SAM bridge.
  * 0.21 - Addresshelper. First worthwhile release for people who aren't shell
  enthusiasts.

Silly Questions I'm asking myself about how I want it to work:
- --------------------------------------------------------------

Definitely not going to do any more filtering than I already do. Instead I'm
going to do build a different proxy to do that and demonstrate how to connect
the two.

Installation and Usage:
=======================

Moved to [misc/docs/INSTALL.md](https://github.com/eyedeekay/si-i2p-plugin/tree/master/misc/docs/INSTALL.md)
-----BEGIN PGP SIGNATURE-----

iQEzBAEBCAAdFiEEcNIGBzi++AUjrK/311wDs5teFOEFAlquxJAACgkQ11wDs5te
FOEIbAf/VICnfapJ2UraV9KErhnENTd7cFh6Bix34lJdx2nBXs5ezA/zgs+Sf/gT
QAQ6BQ7vm6L6KP4Ir2C/jp8BsetRG4I3BkdJiAr7BOB/6xBDdvHpE+UJGPvM5GPh
XRBGUD3k8cMNcl6dKC3KFdnT9BrF3SX0yROLuZ03pDHMBM9RdC7CEYvGVOL9i+hp
fwg3+LkziqEvZjQDzib1p42qikvrNuPn3B/TXxCjH9VbAUQr32Ulu+UEylFtxBhM
xrxPpchmGBVKZdaWXHkPJZDLbu88ahJ8xQmo5l2N9sGZgHPAuxDH2Oih7SrOFrqN
3rNXRpbLnAlsgwYDLE90Ai6wFKJVXQ==
=YugL
-----END PGP SIGNATURE-----
